diff -Nrub '--exclude=*~' linux-3.4.17/arch/arm/include/asm/ftrace.h linux-3.4.17-gcc5/arch/arm/include/asm/ftrace.h
--- linux-3.4.17/arch/arm/include/asm/ftrace.h	2012-10-31 18:05:17.000000000 +0100
+++ linux-3.4.17-gcc5/arch/arm/include/asm/ftrace.h	2016-07-12 11:53:44.274507941 +0200
@@ -45,7 +45,8 @@
 
 #else
 
-extern inline void *return_address(unsigned int level)
+/* 2016-07-12 gc: patch for gcc-5, see  commit aeea359, change to static */
+static inline void *return_address(unsigned int level)
 {
 	return NULL;
 }
diff -Nrub '--exclude=*~' linux-3.4.17/arch/arm/kernel/return_address.c linux-3.4.17-gcc5/arch/arm/kernel/return_address.c
--- linux-3.4.17/arch/arm/kernel/return_address.c	2012-10-31 18:05:17.000000000 +0100
+++ linux-3.4.17-gcc5/arch/arm/kernel/return_address.c	2016-07-12 11:53:33.298317831 +0200
diff -Nrub '--exclude=*~' linux-3.4.17/include/linux/compiler-gcc5.h linux-3.4.17-gcc5/include/linux/compiler-gcc5.h
--- linux-3.4.17/include/linux/compiler-gcc5.h	1970-01-01 01:00:00.000000000 +0100
+++ linux-3.4.17-gcc5/include/linux/compiler-gcc5.h	2012-10-31 18:05:17.000000000 +0100
@@ -0,0 +1,58 @@
+#ifndef __LINUX_COMPILER_H
+#error "Please don't include <linux/compiler-gcc4.h> directly, include <linux/compiler.h> instead."
+#endif
+
+/* GCC 4.1.[01] miscompiles __weak */
+#ifdef __KERNEL__
+# if __GNUC_MINOR__ == 1 && __GNUC_PATCHLEVEL__ <= 1
+#  error Your version of gcc miscompiles the __weak directive
+# endif
+#endif
+
+#define __used			__attribute__((__used__))
+#define __must_check 		__attribute__((warn_unused_result))
+#define __compiler_offsetof(a,b) __builtin_offsetof(a,b)
+
+#if __GNUC_MINOR__ >= 3
+/* Mark functions as cold. gcc will assume any path leading to a call
+   to them will be unlikely.  This means a lot of manual unlikely()s
+   are unnecessary now for any paths leading to the usual suspects
+   like BUG(), printk(), panic() etc. [but let's keep them for now for
+   older compilers]
+
+   Early snapshots of gcc 4.3 don't support this and we can't detect this
+   in the preprocessor, but we can live with this because they're unreleased.
+   Maketime probing would be overkill here.
+
+   gcc also has a __attribute__((__hot__)) to move hot functions into
+   a special section, but I don't see any sense in this right now in
+   the kernel context */
+#define __cold			__attribute__((__cold__))
+
+#define __linktime_error(message) __attribute__((__error__(message)))
+
+#if __GNUC_MINOR__ >= 5
+/*
+ * Mark a position in code as unreachable.  This can be used to
+ * suppress control flow warnings after asm blocks that transfer
+ * control elsewhere.
+ *
+ * Early snapshots of gcc 4.5 don't support this and we can't detect
+ * this in the preprocessor, but we can live with this because they're
+ * unreleased.  Really, we need to have autoconf for the kernel.
+ */
+#define unreachable() __builtin_unreachable()
+
+/* Mark a function definition as prohibited from being cloned. */
+#define __noclone	__attribute__((__noclone__))
+
+#endif
+#endif
+
+#if __GNUC_MINOR__ > 0
+#define __compiletime_object_size(obj) __builtin_object_size(obj, 0)
+#endif
+#if __GNUC_MINOR__ >= 4 && !defined(__CHECKER__)
+#define __compiletime_warning(message) __attribute__((warning(message)))
+#define __compiletime_error(message) __attribute__((error(message)))
+#endif
